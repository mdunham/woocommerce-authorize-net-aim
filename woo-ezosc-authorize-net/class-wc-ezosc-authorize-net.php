<?php/** * Plugin Name: Authorize.net AIM for WooCommerce * Plugin URI: http://www.ezOSC.com/ * Description: WooCommerce Plugin for accepting payment through Authorize.net AIM Gateway. * Version: 1.1 * Author: Luis Villarino * Author URI: http://www.ezOSC.com */if (!defined('ABSPATH')) {    exit; // Exit if accessed directly}add_action('plugins_loaded', 'init_woocommerce_ezosc_authorize_net', 0);function init_woocommerce_ezosc_authorize_net() {    if (!class_exists('WC_Payment_Gateway')) { return;}        // Include All Extra Files    include_once( 'class-wc-ezosc-authorize-net-gateway.php' );    include_once( 'class-wc-ezosc-creditcards.php' );    load_plugin_textdomain('woo-ezosc-authorize-net', false, dirname(plugin_basename(__FILE__)) . '/lang');    class woocommerce_ezoscauthorizenet extends WC_Payment_Gateway {        public function __construct() {            global $woocommerce;            $this->id = 'ezoscauthorizenet';            $this->method_title = __('Authorize.net AIM', 'woo-ezosc-authorize-net');            $this->icon = plugins_url('images/cc.png', __FILE__);            $this->has_fields = TRUE;            $this->supports = array(                'products',                'default_credit_card_form',            );            // Load the form fields.            $this->init_form_fields();            // Load the settings.            $this->init_settings();            // Define Plugin Variables            $this->title = $this->settings['title'];            $this->description = $this->settings['description'];            $this->APILoginID = $this->settings['APILoginID'];            $this->APITransactionKey = $this->settings['APITransactionKey'];            $this->TransactionMethod = $this->settings['TransactionMethod'];            $this->TransactionServer = $this->settings['TransactionServer'];            $this->TransactionMode = $this->settings['TransactionMode'];            $this->ProxyServer = $this->settings['ProxyServer'];            $this->ReceiptDescription = $this->settings['ReceiptDescription'];                        $this->DebugEMailAddress = $this->settings['DebugEMailAddress'];                        //Others            $this->signature = 'authorizenet|authorizenet_cc_aim|2.0|2.3';            $this->api_version = '3.1';                  // Actions            add_action('woocommerce_update_options_payment_gateways', array($this, 'process_admin_options'));            add_action('woocommerce_update_options_payment_gateways_' . $this->id, array($this, 'process_admin_options'));        }        /********************************************************************************************/        /** Admin                                                   *********************************/        /********************************************************************************************/                public function admin_options() {            ?>            <h3><?php _e('Authorize.net Advanced Integration Method (AIM)', 'woo-ezosc-authorize-net'); ?></h3>            <p><?php _e('AIM is Authorize.Net\'s recommended connection method and offers the most secure and flexible integration for all types of transactions, including mobile, websites and other business applications.', 'woo-ezosc-authorize-net'); ?></p>            <p><a href="http://www.authorize.net/" target="_blank"><?php _e('Visit Authorize.net Website', 'woo-ezosc-authorize-net'); ?></a> | <a href="http://www.ezosc.com/" target="_blank">Premium Support</a></p>            <table class="form-table">                <?php $this->generate_settings_html(); ?>                                            </table>            <?php        }        function init_form_fields() {            $this->form_fields = array(                'enabled' => array(                    'title' => __('Enable/Disable', 'woo-ezosc-authorize-net'),                    'type' => 'checkbox',                    'label' => __('Enable Authorize.net AIM', 'woo-ezosc-authorize-net'),                    'default' => 'yes'                ),                'title' => array(                    'title' => __('Title', 'woo-ezosc-authorize-net'),                    'type' => 'text',                    'description' => __('This controls the title which the user sees during checkout.', 'woo-ezosc-authorize-net'),                    'default' => __('Credit Cards by Authorize.net', 'woo-ezosc-authorize-net')                ),                'description' => array(                    'title' => __('Description', 'woo-ezosc-authorize-net'),                    'type' => 'textarea',                    'description' => __('This controls the description which the user sees during checkout.', 'woo-ezosc-authorize-net'),                    'default' => __("Pay via Credit Cards.", 'woo-ezosc-authorize-net')                ),                'APILoginID' => array(                    'title' => __('API Login ID', 'woo-ezosc-authorize-net'),                    'type' => 'text',                    'description' => __('The API Login ID used for the Authorize.net service.', 'woo-ezosc-authorize-net'),                    'default' => ''                ),                'APITransactionKey' => array(                    'title' => __('API Transaction Key', 'woo-ezosc-authorize-net'),                    'type' => 'text',                    'description' => __('The API Transaction Key used for the Authorize.net service.', 'woo-ezosc-authorize-net'),                    'default' => ''                ),                              'TransactionMethod' => array(                    'title' => __('Transaction Method', 'woo-ezosc-authorize-net'),                    'type' => 'select',                    'options' => array(                        'Authorization' => 'Authorization',                        'Capture' => 'Capture',                    ),                    'description' => __('The processing method to use for each transaction.', 'woo-ezosc-authorize-net'),                    'default' => 'Capture'                ),                'TransactionServer' => array(                    'title' => __('Transaction Server', 'woo-ezosc-authorize-net'),                    'type' => 'select',                    'options' => array(                        'Live' => 'Live',                        'Test' => 'Test',                    ),                    'description' => __('Perform transactions on the live or test server. The test server should only be used by developers with Authorize.net test accounts.', 'woo-ezosc-authorize-net'),                    'default' => 'Live'                ),                'TransactionMode' => array(                    'title' => __('Transaction Mode', 'woo-ezosc-authorize-net'),                    'type' => 'select',                    'options' => array(                        'Live' => 'Live',                        'Test' => 'Test',                    ),                    'description' => __('Transaction mode used for processing orders.', 'woo-ezosc-authorize-net'),                    'default' => 'Live'                ),                'ProxyServer' => array(                    'title' => __('Proxy Server', 'woo-ezosc-authorize-net'),                    'type' => 'text',                    'description' => __('Send API requests through this proxy server. (host:port, eg: 123.45.67.89:8080 or proxy.example.com:8080).', 'woo-ezosc-authorize-net'),                    'default' => ''                ),                                                 'ReceiptDescription' => array(                    'title' => __('Receipt Description', 'woo-ezosc-authorize-net'),                    'type' => 'text',                    'description' => __('This value will be show in the customer Receipt.', 'woo-ezosc-authorize-net'),                    'default' => 'Order from Store Name'                ),                                'DebugEMailAddress' => array(                    'title' => __('Debug E-Mail Address', 'woo-ezosc-authorize-net'),                    'type' => 'text',                    'description' => __('All parameters of an invalid transaction will be sent to this email address.', 'woo-ezosc-authorize-net'),                    'default' => ''                ),                             );        }        /********************************************************************************************/        /** Validation                                              *********************************/        /********************************************************************************************/                public function validate_fields(){            global $woocommerce;                        // Validate CC            if($_POST['ezoscauthorizenet-card-number'] != '') {                                if (!ezoscValidateCreditCard(str_replace(' ', '', $_POST['ezoscauthorizenet-card-number']))){                    wc_add_notice( __('Credit Card Number is not valid.', 'woo-ezosc-authorize-net'), $notice_type = 'error' );                    return false;                }                            }else{                wc_add_notice( __(' Credit Card Number is required.', 'woo-ezosc-authorize-net'), $notice_type = 'error' );                return false;            }                                    // Expiration date            if($_POST['ezoscauthorizenet-card-expiry'] != '') {                $values = explode(" / ", trim($_POST['ezoscauthorizenet-card-expiry']));                if ($values[1] < 100 ) {$values[1] = "20".$values[1];}                if (!ezoscValidateCreditCardExpirationDate($values[0],$values[1])){                    wc_add_notice( __('Expiration Date is not valid', 'woo-ezosc-authorize-net'), $notice_type = 'error' );                    return false;                                    }                            }else{                wc_add_notice( __('Expiration Date is required.', 'woo-ezosc-authorize-net'), $notice_type = 'error' );                return false;            }                            // Validate CVC            if($_POST['ezoscauthorizenet-card-cvc'] != '') {                if (!ezoscCheckCVV($_POST['ezoscauthorizenet-card-number'],$_POST['ezoscauthorizenet-card-cvc'])){                    wc_add_notice( __('Card CVV is not valid', 'woo-ezosc-authorize-net'), $notice_type = 'error' );                    return false;                                    }                            }else{                wc_add_notice( __('Card CVV is required.', 'woo-ezosc-authorize-net'), $notice_type = 'error' );                return false;            }                                                            return true;        }        /********************************************************************************************/        /** Process Payment                                         *********************************/        /********************************************************************************************/                function process_payment($order_id) {            $order = new WC_Order($order_id);                                                                $params = array('x_login' => $this->APILoginID,                            'x_tran_key' => $this->APITransactionKey,                            'x_invoice_num' => $order->id,                            'x_version' => $this->api_version,                            'x_type' => (($this->TransactionMethod == 'Capture') ? 'AUTH_CAPTURE' : 'AUTH_ONLY'),                            'x_method' => 'CC',                            'x_amount' => number_format($order->order_total, 2, '.', ''),                            'x_currency_code' => get_option('woocommerce_currency'),                            'x_card_num' => str_replace(' ', '', $_POST['ezoscauthorizenet-card-number']),                            'x_exp_date' => str_replace(' / ', '', $_POST['ezoscauthorizenet-card-expiry']),                            'x_card_code' => $_POST['ezoscauthorizenet-card-cvc'],                            'x_description' => $this->ReceiptDescription ,                            'x_first_name' => substr($order->billing_first_name, 0, 50),                            'x_last_name' => substr($order->billing_last_name, 0, 50),                            'x_company' => substr($order->billing_company, 0, 50),                            'x_address' => substr($order->billing_address_1, 0, 60),                            'x_city' => substr($order->billing_city, 0, 40),                            'x_state' => substr($order->billing_state, 0, 40),                            'x_zip' => substr($order->billing_postcode, 0, 20),                            'x_country' => substr($order->billing_country, 0, 60),                            'x_phone' => substr($order->billing_phone, 0, 25),                            'x_email' => substr($order->billing_email, 0, 255),                            'x_cust_id' => substr($order->get_user_id(), 0, 20),                            'x_customer_ip' => $_SERVER['REMOTE_ADDR'],                            'x_relay_response' => 'FALSE',                            'x_delim_data' => 'TRUE',                            'x_delim_char' => ',',                            'x_encap_char' => '|');                    $params['x_ship_to_first_name'] = substr($order->shipping_first_name, 0, 50);              $params['x_ship_to_last_name'] = substr($order->shipping_last_name, 0, 50);              $params['x_ship_to_company'] = substr($order->shipping_company, 0, 50);              $params['x_ship_to_address'] = substr($order->shipping_address_1, 0, 60);              $params['x_ship_to_city'] = substr($order->shipping_city, 0, 40);              $params['x_ship_to_state'] = substr($order->shipping_state, 0, 40);              $params['x_ship_to_zip'] = substr($order->shipping_postcode, 0, 20);              $params['x_ship_to_country'] = substr($order->shipping_country, 0, 60);              if ($this->TransactionMode == 'Test') {                  $params['x_test_request'] = 'TRUE';              }              if ( $this->TransactionServer == 'Live' ) {                $gateway_url = 'https://secure.authorize.net/gateway/transact.dll';              } else {                $gateway_url = 'https://test.authorize.net/gateway/transact.dll';              }                          $post_string = '';            foreach ($params as $key => $value) {              $post_string .= $key . '=' . urlencode(trim($value)) . '&';            }            $post_string = substr($post_string, 0, -1);            // Call API            $transaction_response = sendTransactionToGateway($gateway_url, $post_string, $this->ProxyServer);            $response = array('x_response_code' => '-1',                              'x_response_subcode' => '-1',                              'x_response_reason_code' => '-1');                        if ( !empty($transaction_response) ) {                $raw = explode('|,|', substr($transaction_response, 1, -1));                if ( count($raw) > 54 ) {                  $response = array('x_response_code' => $raw[0],                                    'x_response_subcode' => $raw[1],                                    'x_response_reason_code' => $raw[2],                                    'x_response_reason_text' => $raw[3],                                    'x_auth_code' => $raw[4],                                    'x_avs_code' => $raw[5],                                    'x_trans_id' => $raw[6],                                    'x_invoice_num' => $raw[7],                                    'x_description' => $raw[8],                                    'x_amount' => $raw[9],                                    'x_method' => $raw[10],                                    'x_type' => $raw[11],                                    'x_cust_id' => $raw[12],                                    'x_first_name' => $raw[13],                                    'x_last_name' => $raw[14],                                    'x_company' => $raw[15],                                    'x_address' => $raw[16],                                    'x_city' => $raw[17],                                    'x_state' => $raw[18],                                    'x_zip' => $raw[19],                                    'x_country' => $raw[20],                                    'x_phone' => $raw[21],                                    'x_fax' => $raw[22],                                    'x_email' => $raw[23],                                    'x_ship_to_first_name' => $raw[24],                                    'x_ship_to_last_name' => $raw[25],                                    'x_ship_to_company' => $raw[26],                                    'x_ship_to_address' => $raw[27],                                    'x_ship_to_city' => $raw[28],                                    'x_ship_to_state' => $raw[29],                                    'x_ship_to_zip' => $raw[30],                                    'x_ship_to_country' => $raw[31],                                    'x_tax' => $raw[32],                                    'x_duty' => $raw[33],                                    'x_freight' => $raw[34],                                    'x_tax_exempt' => $raw[35],                                    'x_po_num' => $raw[36],                                    'x_MD5_Hash' => $raw[37],                                    'x_cvv2_resp_code' => $raw[38],                                    'x_cavv_response' => $raw[39],                                    'x_account_number' => $raw[50],                                    'x_card_type' => $raw[51],                                    'x_split_tender_id' => $raw[52],                                    'x_prepaid_requested_amount' => $raw[53],                                    'x_prepaid_balance_on_card' => $raw[54]);                  unset($raw);                }            }            $error = false;                        if ( ($response['x_response_code'] == '1') || ($response['x_response_code'] == '4') ) {                $error = false;            } elseif ($response['x_response_code'] == '2') {                $error = 'declined';            } else {                $error = 'general';            }                        if ($error !== false) {                if ($this->DebugEMailAddress != ''){                    ezoscSendAuthorizeNetDebugEmail($this->DebugEMailAddress, $params, $response);                               }                wc_add_notice(sprintf(__('Transaction Failed. %s', 'woo-ezosc-authorize-net'), $response['x_response_reason_text'] ), $notice_type = 'error');                            }else{                // Payment completed                                               $order->add_order_note(sprintf(__('Authorize.net AIM Transaction Id is %s.', 'woo-ezosc-authorize-net'), $response["x_trans_id"]));                $order->payment_complete($response["x_trans_id"]);                if ($this->TransactionMethod != 'Capture') {                    // Mark as on-hold (we're awaiting the paymen)                    $order->update_status('on-hold', __( 'Awaiting for payment please capture the payment in Authorize.net', 'woocommerce' ));                }                                  return array(                    'result' => 'success',                    'redirect' => $this->get_return_url($order)                );                            }                                }           }    /********************************************************************************************/    /** Add the gateway to WooCommerce                          *********************************/    /********************************************************************************************/    function add_ezoscauthorizenet_gateway($methods) {        $methods[] = 'woocommerce_ezoscauthorizenet';        return $methods;    }    add_filter('woocommerce_payment_gateways', 'add_ezoscauthorizenet_gateway');               // If you're reading this, please contact me at support@ezosc.com.}